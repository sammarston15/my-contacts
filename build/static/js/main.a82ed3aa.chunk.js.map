{"version":3,"sources":["components/home/home.module.scss","components/header/Header.module.scss","components/login/index.module.scss","components/newContact/newContact.module.scss","components/editContact/editContact.module.scss","components/app/App.module.scss","models/SortValues.ts","redux/contacts/actions.ts","redux/contacts/reducer.ts","redux/store.ts","components/header/Header.tsx","redux/contacts/selectors.ts","components/home/ContactsList.tsx","components/home/home.tsx","components/login/Login.tsx","components/newContact/NewContact.tsx","components/editContact/EditContact.tsx","components/app/App.tsx","index.tsx"],"names":["module","exports","SortValues","getAllContacts","createAsyncThunk","axios","get","saveNewContact","data","post","saveEditedContact","put","setNewContact","createAction","setEditingContact","setUpdatedContact","setNewLoggedIn","setNewUser","setSortStatus","setFirstClickCount","setLastClickCount","setContactSearch","initialState","contacts","user","isLoggedIn","loading","sortStatus","FIRST_ASC","firstClickCount","lastClickCount","contactSearch","newContact","editingContact","updatedContact","contactReducer","createReducer","addCase","ContactActions","pending","state","fulfilled","payload","rejected","error","alert","stack","addDefaultCase","store","configureStore","reducer","Header","dispatch","useDispatch","className","styles","headerContainer","headerLeft","title","to","style","color","textDecoration","headerRight","type","search","placeholder","onChange","e","target","value","btn","selectFirstClickCount","selectLastClickCount","selectUpdatedContact","selectIsLoading","selectSortStatus","selectNewContact","ContactsList","history","useHistory","useLocation","useSelector","filter","contact","firstName","toLowerCase","includes","lastName","phone","email","console","log","sort","a","b","nameA","nameB","contactsMap","map","i","contactCard","key","onClick","push","id","useEffect","contactList","listHeader","columnTitle","undefined","Home","home","defaultState","username","password","Login","useState","setData","handleChange","persist","prevState","name","loginPage","loginModal","icon","NewContact","props","newContactContainer","onSubmit","contactForm","required","EditContact","contactIndex","useParams","find","selectEditingContact","editContactContainer","changes","unwrap","then","catch","defaultValue","address1","address2","city","zip","App","exact","path","component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a82ed3aa.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"home\":\"home_home__2bNrD\",\"contactList\":\"home_contactList__vEzzO\",\"listHeader\":\"home_listHeader__1Yih6\",\"columnTitle\":\"home_columnTitle__2M9Sm\",\"columnIcon\":\"home_columnIcon__7pgE9\",\"contactCard\":\"home_contactCard__GXMBQ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"headerContainer\":\"Header_headerContainer__3ccm2\",\"headerLeft\":\"Header_headerLeft__2npg-\",\"title\":\"Header_title__1NaLM\",\"headerRight\":\"Header_headerRight__1dc9e\",\"search\":\"Header_search__2xCMB\",\"btn\":\"Header_btn__3Wkv8\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"loginPage\":\"login_loginPage__pculF\",\"loginModal\":\"login_loginModal__3o71j\",\"icon\":\"login_icon__2oBgV\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"newContactContainer\":\"newContact_newContactContainer__2CjTG\",\"contactForm\":\"newContact_contactForm__27gl6\",\"btn\":\"newContact_btn__i34ye\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"editContactContainer\":\"editContact_editContactContainer__1ONTx\",\"contactForm\":\"editContact_contactForm__3TNEP\",\"btn\":\"editContact_btn__2XBtI\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__1E3x_\"};","export enum SortValues {\n  FIRST_ASC = \"FIRST_ASC\",\n  FIRST_DESC = \"FIRST_DESC\",\n  LAST_ASC = \"LAST_ASC\",\n  LAST_DESC = \"LAST_DESC\",\n}\n","import { createAction, createAsyncThunk } from \"@reduxjs/toolkit\";\r\nimport { User } from \"../../models/interfaces/user\";\r\nimport { Contact } from \"../../models/interfaces/contact\";\r\n// import { SortValues } from '../../models/SortValues'\r\nimport axios from \"axios\";\r\nimport { create } from \"domain\";\r\n\r\nexport const getAllContacts = createAsyncThunk<any>(\r\n  \"CONTACTS/GET_ALL_CONTACTS\",\r\n  () => axios.get(\"/api/contacts\")\r\n);\r\nexport const saveNewContact = createAsyncThunk<any, Contact>(\r\n  \"CONTACTS/SAVE_NEW_CONTACT\",\r\n  (data) => axios.post(\"/api/contacts\", data)\r\n);\r\nexport const saveEditedContact = createAsyncThunk<any, any>('CONTACTS/SAVE_EDITED_CONTACT', (data) => axios.put('/api/contacts', data))\r\nexport const setNewContact = createAction<any>(\"CONTACTS/SET_NEW_CONTACT\");\r\nexport const setEditingContact = createAction<any>('CONTACTS/SET_EDITING_CONTACT');\r\nexport const setUpdatedContact = createAction<Contact>('CONTACTS/SET_UPDATED_CONTACT');\r\nexport const setNewLoggedIn = createAction<boolean>(\"SET_NEW_LOGGEDIN\");\r\nexport const setNewUser = createAction<User>(\"SET_NEW_USER\");\r\nexport const setSortStatus = createAction<any>(\"SET_SORT_STATUS\");\r\nexport const setFirstClickCount = createAction<number>(\"SET_FIRST_CLICK_COUNT\");\r\nexport const setLastClickCount = createAction<number>(\"SET_LAST_CLICK_COUNT\");\r\nexport const setContactSearch = createAction<string>(\"SET_CONTACT_SEARCH\");\r\n","import { createReducer } from \"@reduxjs/toolkit\";\r\nimport { Contact } from \"../../models/interfaces/contact\";\r\nimport { User } from \"../../models/interfaces/user\";\r\nimport * as ContactActions from \"./actions\";\r\nimport { SortValues } from \"../../models/SortValues\";\r\n\r\ninterface ContactsState {\r\n  contacts: Contact[];\r\n  user: User;\r\n  isLoggedIn: boolean;\r\n  loading: boolean;\r\n  sortStatus: SortValues;\r\n  firstClickCount: number;\r\n  lastClickCount: number;\r\n  contactSearch: string;\r\n  newContact: Contact;\r\n  editingContact: Contact;\r\n  updatedContact: Contact;\r\n}\r\n\r\nconst initialState: ContactsState = {\r\n  contacts: [],\r\n  user: {} as User,\r\n  isLoggedIn: false,\r\n  loading: false,\r\n  sortStatus: SortValues.FIRST_ASC,\r\n  firstClickCount: 0,\r\n  lastClickCount: 0,\r\n  contactSearch: \"\",\r\n  newContact: {} as Contact,\r\n  editingContact: {} as Contact,\r\n  updatedContact: {} as Contact\r\n};\r\n\r\nconst contactReducer = createReducer(initialState, (contacts) => {\r\n  contacts\r\n    .addCase(ContactActions.getAllContacts.pending, (state: ContactsState) => ({\r\n      ...state,\r\n      loading: true,\r\n    }))\r\n    .addCase(\r\n      ContactActions.getAllContacts.fulfilled,\r\n      (state: ContactsState, { payload }) => ({\r\n        ...state,\r\n        loading: false,\r\n        contacts: payload.data,\r\n      })\r\n    )\r\n    .addCase(\r\n      ContactActions.getAllContacts.rejected,\r\n      (state: ContactsState, { error }) => {\r\n        alert(`${error.stack}`);\r\n      }\r\n    )\r\n    .addCase(\r\n      ContactActions.setNewLoggedIn,\r\n      (state: ContactsState, { payload }) => ({\r\n        ...state,\r\n        isLoggedIn: payload,\r\n      })\r\n    )\r\n    .addCase(\r\n      ContactActions.setNewUser,\r\n      (state: ContactsState, { payload }) => ({\r\n        ...state,\r\n        user: payload,\r\n      })\r\n    )\r\n    .addCase(\r\n      ContactActions.setSortStatus,\r\n      (state: ContactsState, { payload }) => ({\r\n        ...state,\r\n        sortStatus: payload,\r\n      })\r\n    )\r\n    .addCase(\r\n      ContactActions.setFirstClickCount,\r\n      (state: ContactsState, { payload }) => ({\r\n        ...state,\r\n        firstClickCount: payload,\r\n      })\r\n    )\r\n    .addCase(\r\n      ContactActions.setLastClickCount,\r\n      (state: ContactsState, { payload }) => ({\r\n        ...state,\r\n        lastClickCount: payload,\r\n      })\r\n    )\r\n    .addCase(\r\n      ContactActions.setContactSearch,\r\n      (state: ContactsState, { payload }) => ({\r\n        ...state,\r\n        contactSearch: payload,\r\n      })\r\n    )\r\n    .addCase(ContactActions.saveNewContact.pending, (state: ContactsState) => ({\r\n      ...state,\r\n      loading: true,\r\n    }))\r\n    .addCase(\r\n      ContactActions.saveNewContact.fulfilled,\r\n      (state: ContactsState, { payload }) => ({\r\n        ...state,\r\n        loading: false,\r\n        newContact: {} as Contact,\r\n        contacts: payload.data,\r\n      })\r\n    )\r\n    .addCase(\r\n      ContactActions.saveNewContact.rejected,\r\n      (state: ContactsState, { error }) => {\r\n        alert(`${error.stack}`);\r\n      }\r\n    )\r\n    .addCase(ContactActions.saveEditedContact.pending, (state: ContactsState) => ({\r\n      ...state,\r\n      loading: true,\r\n    }))\r\n    .addCase(\r\n      ContactActions.saveEditedContact.fulfilled,\r\n      (state: ContactsState, { payload }) => ({\r\n        ...state,\r\n        loading: false,\r\n        editingContact: {} as Contact,\r\n        updatedContact: {} as Contact,\r\n        contacts: payload.data,\r\n      })\r\n    )\r\n    .addCase(\r\n      ContactActions.saveEditedContact.rejected,\r\n      (state: ContactsState, { error }) => {\r\n        alert(`${error.stack}`);\r\n      }\r\n    )\r\n    .addCase(\r\n      ContactActions.setNewContact,\r\n      (state: ContactsState, { payload }) => ({\r\n        ...state,\r\n        newContact: payload,\r\n      })\r\n    )\r\n    .addCase(\r\n      ContactActions.setEditingContact,\r\n      (state: ContactsState, { payload }) => ({\r\n        ...state,\r\n        editingContact: payload,\r\n      })\r\n    )\r\n    .addCase(\r\n      ContactActions.setUpdatedContact,\r\n      (state: ContactsState, { payload }) => ({\r\n        ...state,\r\n        updatedContact: payload,\r\n      })\r\n    )\r\n    .addDefaultCase((state: ContactsState) => state);\r\n});\r\n\r\nexport default contactReducer;\r\n","import { Action, configureStore, ThunkAction } from \"@reduxjs/toolkit\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport contactReducer from \"./contacts/reducer\";\r\n\r\n// when adding a new reducer, make sure to add it here\r\nexport const store = configureStore({\r\n  reducer: {\r\n    contacts: contactReducer,\r\n  },\r\n});\r\n\r\nexport type RootState = ReturnType<typeof store.getState>;\r\nexport type AppThunk<ReturnType = void> = ThunkAction<\r\n  ReturnType,\r\n  RootState,\r\n  unknown,\r\n  Action<string>\r\n>;\r\nexport type AppDispatch = typeof store.dispatch\r\nexport const useAppDispatch = () => useDispatch<AppDispatch>() // Export a hook that can be reused to resolve types","import React, { FC } from 'react'\nimport styles from './Header.module.scss'\nimport { setContactSearch } from '../../redux/contacts/actions'\nimport { useDispatch } from 'react-redux'\nimport { Link } from 'react-router-dom'\n\nconst Header: FC = () => {\n  const dispatch = useDispatch();\n\n  return (\n    <div className={styles.headerContainer}>\n      <div className={styles.headerLeft}>\n        <div className={styles.title}><Link to='/' style={{color: 'inherit', textDecoration: 'none'}}>My Contacts</Link></div>\n      </div>\n      <div className={styles.headerRight}>\n        <input type=\"text\" className={styles.search} /* value={} */ placeholder='Search Contacts...' onChange={(e) => {\n          dispatch(setContactSearch(e.target.value))\n        }} />\n        <Link to='/new'>\n          <button className={styles.btn} ><i className=\"fas fa-plus\"></i></button>\n        </Link>\n      </div>\n    </div>\n  )\n}\n\nexport default Header\n","import { RootState } from \"../store\";\nimport { SortValues } from \"../../models/SortValues\";\n\nexport const selectUser = (state: RootState) => state.contacts.user;\nexport const selectFirstClickCount = (state: RootState) => state.contacts.firstClickCount;\nexport const selectLastClickCount = (state: RootState) => state.contacts.lastClickCount;\nexport const selectEditingContact = (contactIndex: number) => (state: RootState) => state.contacts.contacts.find(contact => contact.id == contactIndex);\nexport const selectUpdatedContact = (state: RootState) => state.contacts.updatedContact;\nexport const selectContacts =\n  (sortStatus: SortValues) => (state: RootState) => {\n\n    // ======= Search/filter through contacts ========= \n    if (state.contacts.contactSearch !== '') {\n      return state.contacts.contacts.filter((contact) => {\n        return (\n          contact.firstName?.toLowerCase().includes(state.contacts.contactSearch.toLowerCase()) || \n          contact.lastName?.toLowerCase().includes(state.contacts.contactSearch.toLowerCase()) || \n          contact.phone?.toLowerCase().includes(state.contacts.contactSearch.toLowerCase()) || \n          contact.email?.toLowerCase().includes(state.contacts.contactSearch.toLowerCase())\n        ) \n      })\n    }\n\n\n    // ============= logic with select element ===============\n    // // console.log({ sortStatus });\n    // if (sortStatus === SortValues.FIRST_ASC) {\n    //   // console.log(\"sort asc by first name\");\n    //   return [...state.contacts.contacts].sort((a, b) => {\n    //     const nameA = a.firstName.toLowerCase();\n    //     const nameB = b.firstName.toLowerCase();\n    //     if (nameA < nameB) return -1;\n    //     if (nameA > nameB) return 1;\n    //     return 0;\n    //   });\n    // }\n    // if (sortStatus === SortValues.FIRST_DESC) {\n    //   // console.log(\"sort desc by first name\");\n    //   return [...state.contacts.contacts].sort((a, b) => {\n    //     const nameA = a.firstName.toLowerCase();\n    //     const nameB = b.firstName.toLowerCase();\n    //     if (nameA > nameB) return -1;\n    //     if (nameA < nameB) return 1;\n    //     return 0;\n    //   });\n    // }\n    // if (sortStatus === SortValues.LAST_ASC) {\n    //   return [...state.contacts.contacts].sort((a, b) => {\n    //     const nameA = a.lastName.toLowerCase();\n    //     const nameB = b.lastName.toLowerCase();\n    //     if (nameA < nameB) return -1;\n    //     if (nameA > nameB) return 1;\n    //     return 0;\n    //   });\n    // }\n    // if (sortStatus === SortValues.LAST_DESC) {\n      //   return [...state.contacts.contacts].sort((a, b) => {\n        //     const nameA = a.lastName.toLowerCase();\n        //     const nameB = b.lastName.toLowerCase();\n        //     if (nameA > nameB) return -1;\n        //     if (nameA < nameB) return 1;\n        //     return 0;\n        //   });\n        // }\n        \n    // return [...state.contacts.contacts].sort((a, b) => {\n    //   const nameA = a.firstName.toLowerCase();\n    //   const nameB = b.firstName.toLowerCase();\n    //   if (nameA < nameB) return -1;\n    //   if (nameA > nameB) return 1;\n    //   return 0;\n    // });\n\n\n\n    // ================= logic with click count of table title ===========================\n    if (state.contacts.firstClickCount === 1) {\n        console.log(\"sort asc by first name\");\n        return [...state.contacts.contacts].sort((a, b) => {\n          const nameA = a.firstName?.toLowerCase();\n          const nameB = b.firstName?.toLowerCase();\n          if (nameA < nameB) return -1;\n          if (nameA > nameB) return 1;\n          return 0;\n        });\n      }\n      if (state.contacts.firstClickCount === 2) {\n        console.log(\"sort desc by first name\");\n        return [...state.contacts.contacts].sort((a, b) => {\n          const nameA = a.firstName?.toLowerCase();\n          const nameB = b.firstName?.toLowerCase();\n          if (nameA > nameB) return -1;\n          if (nameA < nameB) return 1;\n          return 0;\n        });\n      }\n      if (state.contacts.lastClickCount === 1) {\n        console.log(\"sort asc by last name\");\n        return [...state.contacts.contacts].sort((a, b) => {\n          const nameA = a.lastName?.toLowerCase();\n          const nameB = b.lastName?.toLowerCase();\n          if (nameA < nameB) return -1;\n          if (nameA > nameB) return 1;\n          return 0;\n        });\n      }\n      if (state.contacts.lastClickCount === 2) {\n        console.log(\"sort desc by last name\");\n        return [...state.contacts.contacts].sort((a, b) => {\n          const nameA = a.lastName?.toLowerCase();\n          const nameB = b.lastName?.toLowerCase();\n          if (nameA > nameB) return -1;\n          if (nameA < nameB) return 1;\n          return 0;\n        });\n      }\n\n\n      \n\n      // default return statement\n      return state.contacts.contacts\n  };\nexport const selectIsLoggedIn = (state: RootState) => state.contacts.isLoggedIn;\nexport const selectIsLoading = (state: RootState) => state.contacts.loading;\nexport const selectSortStatus = (state: RootState) => state.contacts.sortStatus;\nexport const selectNewContact = (state: RootState) => state.contacts.newContact;\n\n","import React, { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { getAllContacts, setFirstClickCount, setLastClickCount, /* setSortStatus */ } from \"../../redux/contacts/actions\";\nimport {\n  selectFirstClickCount,\n  selectLastClickCount,\n  selectContacts,\n  selectIsLoading,\n  selectSortStatus,\n} from \"../../redux/contacts/selectors\";\nimport styles from \"./home.module.scss\";\nimport { useHistory, useLocation } from 'react-router-dom'\n// import { SortValues } from \"../../models/SortValues\";\n\nconst ContactsList = () => {\n  let history = useHistory();\n  let location = useLocation();\n\n  // DISPATCH HOOK\n  const dispatch = useDispatch();\n\n  // SELECTORS\n  const loading = useSelector(selectIsLoading);\n  const sortStatus = useSelector(selectSortStatus);\n  const contacts = useSelector(selectContacts(sortStatus));\n  const firstClickCount = useSelector(selectFirstClickCount)\n  const lastClickCount = useSelector(selectLastClickCount)\n  \n  const contactsMap = contacts.map((contact, i) => (\n    <div className={styles.contactCard} key={i} onClick={() => {\n      history.push(`/contact/${contact.id}`)\n    }}>\n      <div>{contact.firstName}</div>\n      <div>{contact.lastName}</div>\n      <div>{contact.phone}</div>\n      <div>{contact.email}</div>\n    </div>\n  ));\n\n\n  useEffect(() => {\n    dispatch(getAllContacts());\n  }, []);\n\n  return (\n    <>\n      {/* <div className={styles.sortDropdownContainer}>\n        <select\n          value={sortStatus}\n          onChange={(e) => {\n            console.log(e.target.value);\n            dispatch(setSortStatus(e.target.value));\n          }}\n        >\n          <option value={SortValues.FIRST_ASC}>First Name: A-Z</option>\n          <option value={SortValues.FIRST_DESC}>First Name: Z-A</option>\n          <option value={SortValues.LAST_ASC}>Last Name: A-Z</option>\n          <option value={SortValues.LAST_DESC}>Last Name: Z-A</option>\n        </select>\n      </div> */}\n      <div className={styles.contactList}>\n        <div className={styles.listHeader}>\n          <div className={styles.columnTitle} onClick={() => {\n            dispatch(setLastClickCount(0))\n            dispatch(setFirstClickCount(firstClickCount + 1))\n            if (firstClickCount === 2) {\n              dispatch(setFirstClickCount(0))\n            }\n          }}>\n            <div>First</div>\n            {firstClickCount === 1 ? <span><i className=\"fas fa-sort-up\"></i></span> : null }\n            {firstClickCount === 2 ? <span><i className=\"fas fa-sort-up fa-rotate-180\"></i></span> : null }\n          </div>\n          <div className={styles.columnTitle} onClick={() => {\n            dispatch(setFirstClickCount(0))\n            dispatch(setLastClickCount(lastClickCount + 1))\n            if (lastClickCount === 2) {\n              dispatch(setLastClickCount(0))\n            }\n          }}>\n            <div>Last</div>\n            {lastClickCount === 1 ? <span><i className=\"fas fa-sort-up\"></i></span> : null }\n            {lastClickCount === 2 ? <span><i className=\"fas fa-sort-up fa-rotate-180\"></i></span> : null }\n          </div>\n          <div className={styles.columnTitle}>\n            Phone\n          </div>\n          <div className={styles.columnTitle}>\n            Email\n          </div>\n        </div>\n        {loading && contacts === undefined ? <h1>loading</h1> : contactsMap}\n      </div>\n    </>\n  );\n};\n\nexport default ContactsList;\n","import React, { FC } from \"react\";\r\n// import { useDispatch, useSelector } from \"react-redux\";\r\n// import { selectContacts, selectIsLoading, selectUser } from \"../../redux/contacts/selectors\";\r\nimport styles from \"./home.module.scss\";\r\n// import axios from \"axios\";\r\n\r\n// Components\r\nimport Header from \"../header/Header\";\r\nimport ContactsList from '../home/ContactsList';\r\n\r\nexport const Home: FC = () => {\r\n   \r\n\r\n  return (\r\n    <div className={styles.home}>\r\n      <Header />\r\n      <ContactsList />\r\n    </div>\r\n  );\r\n};\r\n","import React, { FC, useState } from \"react\";\r\n// import axios from \"axios\";\r\nimport styles from \"./index.module.scss\";\r\n\r\nconst defaultState = {\r\n  username: \"\",\r\n  password: \"\",\r\n};\r\n\r\nexport const Login: FC = () => {\r\n  const [data, setData] = useState(defaultState);\r\n  const { username, password } = data;\r\n\r\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    e.persist();\r\n    setData((prevState) => ({\r\n      ...prevState,\r\n      [e.target.name]: e.target.value,\r\n    }));\r\n  };\r\n\r\n  console.log(data);\r\n  return (\r\n    <div className={styles.loginPage}>\r\n      <div className={styles.loginModal}>\r\n        <div className={styles.icon}>\r\n          <i className=\"fas fa-user\"></i>\r\n        </div>\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"username\"\r\n          name=\"username\"\r\n          value={username}\r\n          onChange={handleChange}\r\n        />\r\n        <input\r\n          type=\"password\"\r\n          placeholder=\"password\"\r\n          name=\"password\"\r\n          value={password}\r\n          onChange={handleChange}\r\n        />\r\n        <button>log in</button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import React, { FC, useState } from 'react'\nimport styles from './newContact.module.scss'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { selectIsLoading, selectNewContact } from '../../redux/contacts/selectors'\n// import { Contact } from '../../models/interfaces/contact'\nimport { setNewContact, saveNewContact } from '../../redux/contacts/actions'\n\n\n// Components\nimport Header from '../header/Header'\nimport { Contact } from '../../models/interfaces/contact'\n\nconst NewContact: FC = (props) => {\n  const loading = useSelector(selectIsLoading);\n  const newContact = useSelector(selectNewContact);\n\n  const dispatch = useDispatch();\n\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    dispatch(setNewContact({\n      ...newContact, \n      [e.target.name]: e.target.value\n    }))\n  };\n\n  const handleSave = () => dispatch(saveNewContact(newContact))\n\n  return (\n    <>\n      <Header />\n      {loading? \n      <h1>loading...</h1>\n      :\n      <div className={styles.newContactContainer}>\n        <form onSubmit={handleSave} className={styles.contactForm}>\n          <label>First Name</label>\n          <input type=\"text\" name='firstName' required onChange={handleChange}/>\n          <label>Last Name</label>\n          <input type=\"text\" name='lastName' onChange={handleChange}/>\n          <label>Phone</label>\n          <input type=\"text\" name='phone' onChange={handleChange}/>\n          <label>Email</label>\n          <input type=\"text\" name='email' onChange={handleChange}/>\n          <label>Address 1</label>\n          <input type=\"text\" name='address1' onChange={handleChange}/>\n          <label>Address 2</label>\n          <input type=\"text\" name='address2' onChange={handleChange}/>\n          <label>City</label>\n          <input type=\"text\" name='city' onChange={handleChange}/>\n          <label>State</label>\n          <input type=\"text\" name='state' onChange={handleChange}/>\n          <label>Zip Code</label>\n          <input type=\"text\" name='zip' onChange={handleChange}/>\n          <button className={styles.btn} type='submit'>Save</button>\n        </form>\n      </div>\n      }\n    </>\n  )\n}\n\nexport default NewContact\n","import React, { FC, useEffect } from 'react'\nimport styles from './editContact.module.scss'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { useAppDispatch } from '../../redux/store'\nimport { selectIsLoading, selectEditingContact, selectUpdatedContact} from '../../redux/contacts/selectors'\nimport { setUpdatedContact, setEditingContact, saveEditedContact } from '../../redux/contacts/actions'\nimport { useParams, useHistory, useLocation } from 'react-router-dom'\n\n\n// Components\nimport Header from '../header/Header'\n\n\nconst EditContact: FC = () => {\n  let { contactIndex } : any = useParams();\n  let history = useHistory();\n  // let location = useLocation();\n  console.log(history)\n  \n  const loading = useSelector(selectIsLoading);\n  \n  const dispatch = useAppDispatch();\n\n  const editingContact = useSelector(selectEditingContact(contactIndex))\n  dispatch(setEditingContact(editingContact))\n  const updatedContact = useSelector(selectUpdatedContact)\n\n  \n\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    dispatch(setUpdatedContact({\n      ...updatedContact, \n      [e.target.name]: e.target.value\n    }))\n  };\n  \n  const handleSave = () => {\n    if (updatedContact) {\n      const data = {\n        editingContact, \n        changes: updatedContact\n      }\n      dispatch(saveEditedContact(data)).unwrap().then(() => {\n        alert('successfully saved edited contact!')\n        history.push('/')\n      }).catch(error => alert(error))\n    } else {\n      alert('problem with updating contact | \\'updatedContact\\' is falsy')\n    }\n  }\n\n  return (\n    <>\n      <Header />\n      {loading? \n      <h1>loading...</h1>\n      :\n      <div className={styles.editContactContainer}>\n        <form onSubmit={handleSave} className={styles.contactForm}>\n          <label>First Name</label>\n          <input type=\"text\" name='firstName' defaultValue={editingContact?.firstName} onChange={handleChange} required/>\n          <label>Last Name</label>\n          <input type=\"text\" name='lastName' defaultValue={editingContact?.lastName} onChange={handleChange}/>\n          <label>Phone</label>\n          <input type=\"text\" name='phone' defaultValue={editingContact?.phone} onChange={handleChange}/>\n          <label>Email</label>\n          <input type=\"text\" name='email' defaultValue={editingContact?.email} onChange={handleChange}/>\n          <label>Address 1</label>\n          <input type=\"text\" name='address1' defaultValue={editingContact?.address1} onChange={handleChange}/>\n          <label>Address 2</label>\n          <input type=\"text\" name='address2' defaultValue={editingContact?.address2} onChange={handleChange}/>\n          <label>City</label>\n          <input type=\"text\" name='city' defaultValue={editingContact?.city} onChange={handleChange}/>\n          <label>State</label>\n          <input type=\"text\" name='state' defaultValue={editingContact?.state} onChange={handleChange}/>\n          <label>Zip Code</label>\n          <input type=\"text\" name='zip' defaultValue={editingContact?.zip} onChange={handleChange}/>\n          <button className={styles.btn} type='submit'>Save</button>\n        </form>\n      </div>\n      }\n    </>\n  )\n}\n\nexport default EditContact\n","import React, { FC } from \"react\";\r\nimport { HashRouter as Router, Switch, Route } from \"react-router-dom\";\r\nimport styles from \"./App.module.scss\";\r\nimport { Home } from \"../home/home\";\r\nimport { Login } from \"../login/Login\";\r\nimport NewContact from '../newContact/NewContact'\r\nimport EditContact from \"../editContact/EditContact\";\r\n\r\nexport const App: FC = () => (\r\n  <Router>\r\n    <div className={styles.App}>\r\n      <Switch>\r\n        <Route exact path=\"/\" component={Home} />\r\n        <Route path=\"/login\" component={Login} />\r\n        <Route path=\"/new\" component={NewContact} />\r\n        <Route path='/contact/:contactIndex' component={EditContact} />\r\n      </Switch>\r\n    </div>\r\n  </Router>\r\n);\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.module.scss\";\r\nimport { Provider } from \"react-redux\";\r\nimport { store } from \"./redux/store\";\r\nimport { App } from \"./components/app/App\";\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <React.StrictMode>\r\n      <App />\r\n    </React.StrictMode>\r\n  </Provider>,\r\n\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\n"],"sourceRoot":""}