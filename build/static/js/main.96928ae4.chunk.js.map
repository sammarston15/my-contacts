{"version":3,"sources":["components/home/home.module.scss","components/header/Header.module.scss","components/login/index.module.scss","components/newContact/newContact.module.scss","components/app/App.module.scss","models/SortValues.ts","redux/contacts/selectors.ts","redux/contacts/actions.ts","redux/contacts/reducer.ts","redux/store.ts","components/header/Header.tsx","components/home/ContactsList.tsx","components/home/home.tsx","components/login/Login.tsx","components/newContact/NewContact.tsx","components/app/App.tsx","index.tsx"],"names":["module","exports","SortValues","selectFirstClickCount","state","contacts","firstClickCount","selectLastClickCount","lastClickCount","selectIsLoading","loading","selectSortStatus","sortStatus","selectNewContact","newContact","getAllContacts","createAsyncThunk","a","axios","get","saveNewContact","newContactData","useSelector","console","log","post","setNewContact","createAction","setNewLoggedIn","setNewUser","setSortStatus","setFirstClickCount","setLastClickCount","setContactSearch","initialState","user","isLoggedIn","FIRST_ASC","contactSearch","contactReducer","createReducer","addCase","ContactActions","pending","fulfilled","payload","data","rejected","error","alert","stack","addDefaultCase","store","configureStore","reducer","Header","dispatch","useDispatch","className","styles","headerContainer","headerLeft","title","to","style","color","textDecoration","headerRight","type","search","placeholder","onChange","e","target","value","btn","ContactsList","filter","contact","firstName","toLowerCase","includes","lastName","phone","email","sort","b","nameA","nameB","contactsMap","map","i","contactCard","key","useEffect","contactList","listHeader","columnTitle","onClick","undefined","Home","home","defaultState","username","password","Login","useState","setData","handleChange","persist","prevState","name","loginPage","loginModal","icon","NewContact","props","newContactContainer","onSubmit","contactForm","App","exact","path","component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.96928ae4.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"home\":\"home_home__2bNrD\",\"contactList\":\"home_contactList__vEzzO\",\"listHeader\":\"home_listHeader__1Yih6\",\"columnTitle\":\"home_columnTitle__2M9Sm\",\"columnIcon\":\"home_columnIcon__7pgE9\",\"contactCard\":\"home_contactCard__GXMBQ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"headerContainer\":\"Header_headerContainer__3ccm2\",\"headerLeft\":\"Header_headerLeft__2npg-\",\"title\":\"Header_title__1NaLM\",\"headerRight\":\"Header_headerRight__1dc9e\",\"search\":\"Header_search__2xCMB\",\"btn\":\"Header_btn__3Wkv8\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"loginPage\":\"login_loginPage__pculF\",\"loginModal\":\"login_loginModal__3o71j\",\"icon\":\"login_icon__2oBgV\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"newContactContainer\":\"newContact_newContactContainer__2CjTG\",\"contactForm\":\"newContact_contactForm__27gl6\",\"btn\":\"newContact_btn__i34ye\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__1E3x_\"};","export enum SortValues {\n  FIRST_ASC = \"FIRST_ASC\",\n  FIRST_DESC = \"FIRST_DESC\",\n  LAST_ASC = \"LAST_ASC\",\n  LAST_DESC = \"LAST_DESC\",\n}\n","import { RootState } from \"../store\";\nimport { SortValues } from \"../../models/SortValues\";\n\nexport const selectUser = (state: RootState) => state.contacts.user;\nexport const selectFirstClickCount = (state: RootState) => state.contacts.firstClickCount;\nexport const selectLastClickCount = (state: RootState) => state.contacts.lastClickCount;\nexport const selectContacts =\n  (sortStatus: SortValues) => (state: RootState) => {\n\n    // ======= Search/filter through contacts ========= \n    if (state.contacts.contactSearch !== '') {\n      return state.contacts.contacts.filter((contact) => {\n        return (\n          contact.firstName.toLowerCase().includes(state.contacts.contactSearch.toLowerCase()) || \n          contact.lastName.toLowerCase().includes(state.contacts.contactSearch.toLowerCase()) || \n          contact.phone?.toLowerCase().includes(state.contacts.contactSearch.toLowerCase()) || \n          contact.email?.toLowerCase().includes(state.contacts.contactSearch.toLowerCase())\n      )})\n    }\n\n\n    // ============= logic with select element ===============\n    // // console.log({ sortStatus });\n    // if (sortStatus === SortValues.FIRST_ASC) {\n    //   // console.log(\"sort asc by first name\");\n    //   return [...state.contacts.contacts].sort((a, b) => {\n    //     const nameA = a.firstName.toLowerCase();\n    //     const nameB = b.firstName.toLowerCase();\n    //     if (nameA < nameB) return -1;\n    //     if (nameA > nameB) return 1;\n    //     return 0;\n    //   });\n    // }\n    // if (sortStatus === SortValues.FIRST_DESC) {\n    //   // console.log(\"sort desc by first name\");\n    //   return [...state.contacts.contacts].sort((a, b) => {\n    //     const nameA = a.firstName.toLowerCase();\n    //     const nameB = b.firstName.toLowerCase();\n    //     if (nameA > nameB) return -1;\n    //     if (nameA < nameB) return 1;\n    //     return 0;\n    //   });\n    // }\n    // if (sortStatus === SortValues.LAST_ASC) {\n    //   return [...state.contacts.contacts].sort((a, b) => {\n    //     const nameA = a.lastName.toLowerCase();\n    //     const nameB = b.lastName.toLowerCase();\n    //     if (nameA < nameB) return -1;\n    //     if (nameA > nameB) return 1;\n    //     return 0;\n    //   });\n    // }\n    // if (sortStatus === SortValues.LAST_DESC) {\n      //   return [...state.contacts.contacts].sort((a, b) => {\n        //     const nameA = a.lastName.toLowerCase();\n        //     const nameB = b.lastName.toLowerCase();\n        //     if (nameA > nameB) return -1;\n        //     if (nameA < nameB) return 1;\n        //     return 0;\n        //   });\n        // }\n        \n    // return [...state.contacts.contacts].sort((a, b) => {\n    //   const nameA = a.firstName.toLowerCase();\n    //   const nameB = b.firstName.toLowerCase();\n    //   if (nameA < nameB) return -1;\n    //   if (nameA > nameB) return 1;\n    //   return 0;\n    // });\n\n\n\n    // ================= logic with click count of table title ===========================\n    if (state.contacts.firstClickCount === 1) {\n        console.log(\"sort asc by first name\");\n        return [...state.contacts.contacts].sort((a, b) => {\n          const nameA = a.firstName.toLowerCase();\n          const nameB = b.firstName.toLowerCase();\n          if (nameA < nameB) return -1;\n          if (nameA > nameB) return 1;\n          return 0;\n        });\n      }\n      if (state.contacts.firstClickCount === 2) {\n        console.log(\"sort desc by first name\");\n        return [...state.contacts.contacts].sort((a, b) => {\n          const nameA = a.firstName.toLowerCase();\n          const nameB = b.firstName.toLowerCase();\n          if (nameA > nameB) return -1;\n          if (nameA < nameB) return 1;\n          return 0;\n        });\n      }\n      if (state.contacts.lastClickCount === 1) {\n        console.log(\"sort asc by last name\");\n        return [...state.contacts.contacts].sort((a, b) => {\n          const nameA = a.lastName.toLowerCase();\n          const nameB = b.lastName.toLowerCase();\n          if (nameA < nameB) return -1;\n          if (nameA > nameB) return 1;\n          return 0;\n        });\n      }\n      if (state.contacts.lastClickCount === 2) {\n        console.log(\"sort desc by last name\");\n        return [...state.contacts.contacts].sort((a, b) => {\n          const nameA = a.lastName.toLowerCase();\n          const nameB = b.lastName.toLowerCase();\n          if (nameA > nameB) return -1;\n          if (nameA < nameB) return 1;\n          return 0;\n        });\n      }\n\n\n      \n\n      // default return statement\n      return state.contacts.contacts\n  };\nexport const selectIsLoggedIn = (state: RootState) => state.contacts.isLoggedIn;\nexport const selectIsLoading = (state: RootState) => state.contacts.loading;\nexport const selectSortStatus = (state: RootState) => state.contacts.sortStatus;\nexport const selectNewContact = (state: RootState) => state.contacts.newContact;\n\n","import { createAction, createAsyncThunk } from \"@reduxjs/toolkit\";\r\nimport { User } from \"../../models/interfaces/user\"\r\nimport { Contact } from '../../models/interfaces/contact'\r\nimport { useSelector } from \"react-redux\";\r\nimport { selectNewContact } from './selectors'\r\n// import { SortValues } from '../../models/SortValues'\r\nimport axios from 'axios'\r\n\r\nexport const getAllContacts = createAsyncThunk<any>('CONTACTS/GET_ALL_CONTACTS', async () => await axios.get('/api/contacts'));\r\nexport const saveNewContact = createAsyncThunk<any, Contact>(\"CONTACTS/SET_NEW_CONTACT\", async () => {\r\n  const newContactData = useSelector(selectNewContact);\r\n  console.log('newContactData', newContactData)\r\n  await axios.post('/api/contacts', newContactData)\r\n});\r\nexport const setNewContact = createAction<any>(\"SET_NEW_CONTACT\");\r\nexport const setNewLoggedIn = createAction<boolean>(\"SET_NEW_LOGGEDIN\");\r\nexport const setNewUser = createAction<User>(\"SET_NEW_USER\");\r\nexport const setSortStatus = createAction<any>('SET_SORT_STATUS');\r\nexport const setFirstClickCount = createAction<number>('SET_FIRST_CLICK_COUNT');\r\nexport const setLastClickCount = createAction<number>('SET_LAST_CLICK_COUNT');\r\nexport const setContactSearch = createAction<string>('SET_CONTACT_SEARCH');\r\n","import { createReducer } from \"@reduxjs/toolkit\";\r\nimport { Contact } from \"../../models/interfaces/contact\";\r\nimport { User } from \"../../models/interfaces/user\";\r\nimport * as ContactActions from \"./actions\";\r\nimport { SortValues } from '../../models/SortValues'\r\n\r\n\r\ninterface ContactsState {\r\n  contacts: Contact[];\r\n  user: User;\r\n  isLoggedIn: boolean;\r\n  loading: boolean;\r\n  sortStatus: SortValues;\r\n  firstClickCount: number;\r\n  lastClickCount: number;\r\n  contactSearch: string;\r\n  newContact: Contact;\r\n\r\n}\r\n\r\nconst initialState: ContactsState = {\r\n  contacts: [],\r\n  user: {} as User,\r\n  isLoggedIn: false,\r\n  loading: false,\r\n  sortStatus: SortValues.FIRST_ASC,\r\n  firstClickCount: 0,\r\n  lastClickCount: 0,\r\n  contactSearch: '',\r\n  newContact: {} as Contact\r\n\r\n};\r\n\r\nconst contactReducer = createReducer(initialState, (contacts) => {\r\n  contacts\r\n    .addCase(\r\n      ContactActions.getAllContacts.pending, \r\n      (state: ContactsState) => ({\r\n        ...state,\r\n        loading: true\r\n    }))\r\n    .addCase(\r\n      ContactActions.getAllContacts.fulfilled,\r\n      (state: ContactsState, { payload }) => ({\r\n        ...state,\r\n        loading: false,\r\n        contacts: payload.data,\r\n      })\r\n    )\r\n    .addCase(\r\n      ContactActions.getAllContacts.rejected,\r\n      (state: ContactsState, { error }) => {\r\n        alert(`${error.stack}`)\r\n      }\r\n    )\r\n    .addCase(\r\n      ContactActions.setNewLoggedIn,\r\n      (state: ContactsState, { payload }) => ({\r\n        ...state,\r\n        isLoggedIn: payload,\r\n      })\r\n    )\r\n    .addCase(\r\n      ContactActions.setNewUser,\r\n      (state: ContactsState, { payload }) => ({\r\n        ...state,\r\n        user: payload,\r\n      })\r\n    )\r\n    .addCase(\r\n      ContactActions.setSortStatus,\r\n      (state: ContactsState, { payload }) => ({\r\n        ...state,\r\n        sortStatus: payload,\r\n      })\r\n    )\r\n    .addCase(\r\n      ContactActions.setFirstClickCount,\r\n      (state: ContactsState, { payload }) => ({\r\n        ...state,\r\n        firstClickCount: payload,\r\n      })\r\n    )\r\n    .addCase(\r\n      ContactActions.setLastClickCount,\r\n      (state: ContactsState, { payload }) => ({\r\n        ...state,\r\n        lastClickCount: payload,\r\n      })\r\n    )\r\n    .addCase(\r\n      ContactActions.setContactSearch,\r\n      (state: ContactsState, { payload }) => ({\r\n        ...state,\r\n        contactSearch: payload,\r\n      })\r\n    )\r\n    .addCase(\r\n      ContactActions.saveNewContact.pending,\r\n      (state: ContactsState) => ({\r\n        ...state,\r\n        loading: true\r\n      })\r\n    )\r\n    .addCase(\r\n      ContactActions.saveNewContact.fulfilled,\r\n      (state: ContactsState, { payload }) => ({\r\n        ...state,\r\n        loading: false,\r\n        newContact: {} as Contact,\r\n      })\r\n    )\r\n    .addCase(\r\n      ContactActions.saveNewContact.rejected,\r\n      (state: ContactsState, { error }) => {\r\n        alert(`${error.stack}`)\r\n      }\r\n    )\r\n    .addCase(\r\n      ContactActions.setNewContact,\r\n      (state: ContactsState, { payload }) => ({\r\n        ...state,\r\n        newContact: payload,\r\n      })\r\n    )\r\n    .addDefaultCase((state: ContactsState) => state);\r\n});\r\n\r\nexport default contactReducer;\r\n","import { Action, configureStore, ThunkAction } from \"@reduxjs/toolkit\";\r\nimport contactReducer from \"./contacts/reducer\";\r\n\r\n// when adding a new reducer, make sure to add it here\r\nexport const store = configureStore({\r\n  reducer: {\r\n    contacts: contactReducer,\r\n  },\r\n});\r\n\r\nexport type RootState = ReturnType<typeof store.getState>;\r\nexport type AppThunk<ReturnType = void> = ThunkAction<\r\n  ReturnType,\r\n  RootState,\r\n  unknown,\r\n  Action<string>\r\n>;\r\n","import React, { FC } from 'react'\nimport styles from './Header.module.scss'\nimport { setContactSearch } from '../../redux/contacts/actions'\nimport { useDispatch } from 'react-redux'\nimport { Link } from 'react-router-dom'\n\nconst Header: FC = () => {\n  const dispatch = useDispatch();\n\n  return (\n    <div className={styles.headerContainer}>\n      <div className={styles.headerLeft}>\n        <div className={styles.title}><Link to='/' style={{color: 'inherit', textDecoration: 'none'}}>My Contacts</Link></div>\n      </div>\n      <div className={styles.headerRight}>\n        <input type=\"text\" className={styles.search} /* value={} */ placeholder='Search Contacts...' onChange={(e) => {\n          dispatch(setContactSearch(e.target.value))\n        }} />\n        <Link to='/new'>\n          <button className={styles.btn} ><i className=\"fas fa-plus\"></i></button>\n        </Link>\n      </div>\n    </div>\n  )\n}\n\nexport default Header\n","import React, { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { getAllContacts, setFirstClickCount, setLastClickCount, /* setSortStatus */ } from \"../../redux/contacts/actions\";\nimport {\n  selectFirstClickCount,\n  selectLastClickCount,\n  selectContacts,\n  selectIsLoading,\n  selectSortStatus,\n} from \"../../redux/contacts/selectors\";\nimport styles from \"./home.module.scss\";\n// import { SortValues } from \"../../models/SortValues\";\n\nconst ContactsList = () => {\n  // DISPATCH HOOK\n  const dispatch = useDispatch();\n\n  // SELECTORS\n  const loading = useSelector(selectIsLoading);\n  const sortStatus = useSelector(selectSortStatus);\n  const contacts = useSelector(selectContacts(sortStatus));\n  const firstClickCount = useSelector(selectFirstClickCount)\n  const lastClickCount = useSelector(selectLastClickCount)\n  \n  const contactsMap = contacts.map((contact, i) => (\n    <div className={styles.contactCard} key={i}>\n      <div>{contact.firstName}</div>\n      <div>{contact.lastName}</div>\n      <div>{contact.phone}</div>\n      <div>{contact.email}</div>\n    </div>\n  ));\n\n\n  useEffect(() => {\n    dispatch(getAllContacts());\n  }, []);\n\n  return (\n    <>\n      {/* <div className={styles.sortDropdownContainer}>\n        <select\n          value={sortStatus}\n          onChange={(e) => {\n            console.log(e.target.value);\n            dispatch(setSortStatus(e.target.value));\n          }}\n        >\n          <option value={SortValues.FIRST_ASC}>First Name: A-Z</option>\n          <option value={SortValues.FIRST_DESC}>First Name: Z-A</option>\n          <option value={SortValues.LAST_ASC}>Last Name: A-Z</option>\n          <option value={SortValues.LAST_DESC}>Last Name: Z-A</option>\n        </select>\n      </div> */}\n      <div className={styles.contactList}>\n        <div className={styles.listHeader}>\n          <div className={styles.columnTitle} onClick={() => {\n            dispatch(setLastClickCount(0))\n            dispatch(setFirstClickCount(firstClickCount + 1))\n            if (firstClickCount === 2) {\n              dispatch(setFirstClickCount(0))\n            }\n          }}>\n            <div>First</div>\n            {firstClickCount === 1 ? <span><i className=\"fas fa-sort-up\"></i></span> : null }\n            {firstClickCount === 2 ? <span><i className=\"fas fa-sort-up fa-rotate-180\"></i></span> : null }\n          </div>\n          <div className={styles.columnTitle} onClick={() => {\n            dispatch(setFirstClickCount(0))\n            dispatch(setLastClickCount(lastClickCount + 1))\n            if (lastClickCount === 2) {\n              dispatch(setLastClickCount(0))\n            }\n          }}>\n            <div>Last</div>\n            {lastClickCount === 1 ? <span><i className=\"fas fa-sort-up\"></i></span> : null }\n            {lastClickCount === 2 ? <span><i className=\"fas fa-sort-up fa-rotate-180\"></i></span> : null }\n          </div>\n          <div className={styles.columnTitle}>\n            Phone\n          </div>\n          <div className={styles.columnTitle}>\n            Email\n          </div>\n        </div>\n        {loading && contacts === undefined ? <h1>loading</h1> : contactsMap}\n      </div>\n    </>\n  );\n};\n\nexport default ContactsList;\n","import React, { FC } from \"react\";\r\n// import { useDispatch, useSelector } from \"react-redux\";\r\n// import { selectContacts, selectIsLoading, selectUser } from \"../../redux/contacts/selectors\";\r\nimport styles from \"./home.module.scss\";\r\n// import axios from \"axios\";\r\n\r\n// Components\r\nimport Header from \"../header/Header\";\r\nimport ContactsList from '../home/ContactsList';\r\n\r\nexport const Home: FC = () => {\r\n   \r\n\r\n  return (\r\n    <div className={styles.home}>\r\n      <Header />\r\n      <ContactsList />\r\n    </div>\r\n  );\r\n};\r\n","import React, { FC, useState } from \"react\";\r\n// import axios from \"axios\";\r\nimport styles from \"./index.module.scss\";\r\n\r\nconst defaultState = {\r\n  username: \"\",\r\n  password: \"\",\r\n};\r\n\r\nexport const Login: FC = () => {\r\n  const [data, setData] = useState(defaultState);\r\n  const { username, password } = data;\r\n\r\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    e.persist();\r\n    setData((prevState) => ({\r\n      ...prevState,\r\n      [e.target.name]: e.target.value,\r\n    }));\r\n  };\r\n\r\n  console.log(data);\r\n  return (\r\n    <div className={styles.loginPage}>\r\n      <div className={styles.loginModal}>\r\n        <div className={styles.icon}>\r\n          <i className=\"fas fa-user\"></i>\r\n        </div>\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"username\"\r\n          name=\"username\"\r\n          value={username}\r\n          onChange={handleChange}\r\n        />\r\n        <input\r\n          type=\"password\"\r\n          placeholder=\"password\"\r\n          name=\"password\"\r\n          value={password}\r\n          onChange={handleChange}\r\n        />\r\n        <button>log in</button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import React, { FC, useState } from 'react'\nimport styles from './newContact.module.scss'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { selectIsLoading, selectNewContact } from '../../redux/contacts/selectors'\n// import { Contact } from '../../models/interfaces/contact'\nimport { setNewContact, saveNewContact } from '../../redux/contacts/actions'\nimport { FormEvent } from 'hoist-non-react-statics/node_modules/@types/react'\n\n// Components\nimport Header from '../header/Header'\nimport { Contact } from '../../models/interfaces/contact'\n\nconst NewContact: FC = (props) => {\n  const loading = useSelector(selectIsLoading);\n  const newContact = useSelector(selectNewContact);\n\n  const dispatch = useDispatch();\n\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    dispatch(setNewContact({\n      ...newContact, \n      [e.target.name]: e.target.value\n    }))\n  };\n\n  const handleSave = () => dispatch(saveNewContact(newContact))\n\n  return (\n    <>\n      <Header />\n      {loading? \n      <h1>loading...</h1>\n      :\n      <div className={styles.newContactContainer}>\n        <form onSubmit={handleSave} className={styles.contactForm}>\n          <label>First Name</label>\n          <input type=\"text\" name='firstName' onChange={handleChange}/>\n          <label>Last Name</label>\n          <input type=\"text\" name='lastName' onChange={handleChange}/>\n          <label>Phone</label>\n          <input type=\"text\" name='phone' onChange={handleChange}/>\n          <label>Email</label>\n          <input type=\"text\" name='email' onChange={handleChange}/>\n          <label>Address 1</label>\n          <input type=\"text\" name='address1' onChange={handleChange}/>\n          <label>Address 2</label>\n          <input type=\"text\" name='address2' onChange={handleChange}/>\n          <label>City</label>\n          <input type=\"text\" name='city' onChange={handleChange}/>\n          <label>State</label>\n          <input type=\"text\" name='state' onChange={handleChange}/>\n          <label>Zip Code</label>\n          <input type=\"text\" name='zip' onChange={handleChange}/>\n          <button className={styles.btn} type='submit'>Save</button>\n        </form>\n      </div>\n      }\n    </>\n  )\n}\n\nexport default NewContact\n","import React, { FC } from \"react\";\r\nimport { HashRouter as Router, Switch, Route } from \"react-router-dom\";\r\nimport styles from \"./App.module.scss\";\r\nimport { Home } from \"../home/home\";\r\nimport { Login } from \"../login/Login\";\r\nimport NewContact from '../newContact/NewContact'\r\n\r\nexport const App: FC = () => (\r\n  <Router>\r\n    <div className={styles.App}>\r\n      <Switch>\r\n        <Route exact path=\"/\" component={Home} />\r\n        <Route path=\"/login\" component={Login} />\r\n        <Route path=\"/new\" component={NewContact} />\r\n      </Switch>\r\n    </div>\r\n  </Router>\r\n);\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.module.scss\";\r\nimport { Provider } from \"react-redux\";\r\nimport { store } from \"./redux/store\";\r\nimport { App } from \"./components/app/App\";\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <React.StrictMode>\r\n      <App />\r\n    </React.StrictMode>\r\n  </Provider>,\r\n\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\n"],"sourceRoot":""}