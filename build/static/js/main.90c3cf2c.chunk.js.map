{"version":3,"sources":["components/home/home.module.scss","components/header/Header.module.scss","components/login/index.module.scss","components/app/App.module.scss","models/SortValues.ts","redux/contacts/actions.ts","redux/contacts/reducer.ts","redux/store.ts","components/header/Header.tsx","redux/contacts/selectors.ts","components/home/ContactsList.tsx","components/home/home.tsx","components/login/Login.tsx","components/app/App.tsx","index.tsx"],"names":["module","exports","SortValues","getAllContacts","createAsyncThunk","a","axios","get","setNewLoggedIn","createAction","setNewUser","setSortStatus","setFirstClickCount","setLastClickCount","setContactSearch","initialState","contacts","user","isLoggedIn","loading","sortStatus","FIRST_ASC","firstClickCount","lastClickCount","contactSearch","contactReducer","createReducer","addCase","ContactActions","pending","state","fulfilled","payload","data","rejected","error","alert","stack","addDefaultCase","store","configureStore","reducer","Header","dispatch","useDispatch","className","styles","headerContainer","headerLeft","title","headerRight","type","search","placeholder","onChange","e","target","value","selectFirstClickCount","selectLastClickCount","selectIsLoading","selectSortStatus","ContactsList","useSelector","filter","contact","firstName","toLowerCase","includes","lastName","phone","email","console","log","sort","b","nameA","nameB","contactsMap","map","i","contactCard","key","useEffect","contactList","listHeader","columnTitle","onClick","undefined","Home","home","defaultState","username","password","Login","useState","setData","handleChange","persist","prevState","name","loginPage","loginModal","icon","App","exact","path","component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oGACAA,EAAOC,QAAU,CAAC,KAAO,mBAAmB,sBAAwB,oCAAoC,YAAc,0BAA0B,WAAa,yBAAyB,YAAc,0BAA0B,WAAa,yBAAyB,YAAc,4B,mBCAlRD,EAAOC,QAAU,CAAC,gBAAkB,gCAAgC,WAAa,2BAA2B,MAAQ,sBAAsB,YAAc,4BAA4B,OAAS,uBAAuB,YAAc,8B,mBCAlOD,EAAOC,QAAU,CAAC,UAAY,yBAAyB,WAAa,0BAA0B,KAAO,sB,mBCArGD,EAAOC,QAAU,CAAC,IAAM,mB,oGCDZC,E,yGCMCC,EAAiBC,YAAsB,4BAAN,sBAAmC,sBAAAC,EAAA,sEAAkBC,IAAMC,IAAI,iBAA5B,oFAEpEC,GADiBC,YAAqB,oBACrBA,YAAsB,qBACvCC,EAAaD,YAAmB,gBAChCE,EAAgBF,YAAkB,mBAClCG,EAAqBH,YAAqB,yBAC1CI,EAAoBJ,YAAqB,wBACzCK,EAAmBL,YAAqB,uB,SDbzCP,K,sBAAAA,E,wBAAAA,E,oBAAAA,E,uBAAAA,M,KEiBZ,IAAMa,EAA8B,CAClCC,SAAU,GACVC,KAAM,GACNC,YAAY,EACZC,SAAS,EACTC,WAAYlB,EAAWmB,UACvBC,gBAAiB,EACjBC,eAAgB,EAChBC,cAAe,IAsEFC,EAnEQC,YAAcX,GAAc,SAACC,GAClDA,EACGW,QACCC,EAA8BC,SAC9B,SAACC,GAAD,sBACKA,EADL,CAEEX,SAAS,OAEZQ,QACCC,EAA8BG,WAC9B,SAACD,EAAD,OAAyBE,EAAzB,EAAyBA,QAAzB,sBACKF,EADL,CAEEX,SAAS,EACTH,SAAUgB,EAAQC,UAGrBN,QACCC,EAA8BM,UAC9B,SAACJ,EAAD,GAAsC,IAAbK,EAAY,EAAZA,MACvBC,MAAM,GAAD,OAAID,EAAME,WAGlBV,QACCC,GACA,SAACE,EAAD,OAAyBE,EAAzB,EAAyBA,QAAzB,sBACKF,EADL,CAEEZ,WAAYc,OAGfL,QACCC,GACA,SAACE,EAAD,OAAyBE,EAAzB,EAAyBA,QAAzB,sBACKF,EADL,CAEEb,KAAMe,OAGTL,QACCC,GACA,SAACE,EAAD,OAAyBE,EAAzB,EAAyBA,QAAzB,sBACKF,EADL,CAEEV,WAAYY,OAGfL,QACCC,GACA,SAACE,EAAD,OAAyBE,EAAzB,EAAyBA,QAAzB,sBACKF,EADL,CAEER,gBAAiBU,OAGpBL,QACCC,GACA,SAACE,EAAD,OAAyBE,EAAzB,EAAyBA,QAAzB,sBACKF,EADL,CAEEP,eAAgBS,OAGnBL,QACCC,GACA,SAACE,EAAD,OAAyBE,EAAzB,EAAyBA,QAAzB,sBACKF,EADL,CAEEN,cAAeQ,OAGlBM,gBAAe,SAACR,GAAD,OAA0BA,QCxFjCS,EAAQC,YAAe,CAClCC,QAAS,CACPzB,SAAUS,K,kECiBCiB,EAlBI,WACjB,IAAMC,EAAWC,cAEjB,OACE,yBAAKC,UAAWC,IAAOC,iBACrB,yBAAKF,UAAWC,IAAOE,YACrB,yBAAKH,UAAWC,IAAOG,OAAvB,gBAEF,yBAAKJ,UAAWC,IAAOI,aACrB,2BAAOC,KAAK,OAAON,UAAWC,IAAOM,OAAuBC,YAAY,qBAAqBC,SAAU,SAACC,GACtGZ,EAAS7B,EAAiByC,EAAEC,OAAOC,c,QCXhCC,EAAwB,SAAC5B,GAAD,OAAsBA,EAAMd,SAASM,iBAC7DqC,EAAuB,SAAC7B,GAAD,OAAsBA,EAAMd,SAASO,gBAoH5DqC,EAAkB,SAAC9B,GAAD,OAAsBA,EAAMd,SAASG,SACvD0C,EAAmB,SAAC/B,GAAD,OAAsBA,EAAMd,SAASI,YC/BtD0C,EA9EM,WAEnB,IAAMnB,EAAWC,cAGXzB,EAAU4C,YAAYH,GAEtB5C,GADa+C,YAAYF,GACdE,aDbW,SAACjC,GAG3B,MAAqC,KAAjCA,EAAMd,SAASQ,cACVM,EAAMd,SAASA,SAASgD,QAAO,SAACC,GAAa,IAAD,IACjD,OACEA,EAAQC,UAAUC,cAAcC,SAAStC,EAAMd,SAASQ,cAAc2C,gBACtEF,EAAQI,SAASF,cAAcC,SAAStC,EAAMd,SAASQ,cAAc2C,iBADrE,UAEAF,EAAQK,aAFR,aAEA,EAAeH,cAAcC,SAAStC,EAAMd,SAASQ,cAAc2C,kBAFnE,UAGAF,EAAQM,aAHR,aAGA,EAAeJ,cAAcC,SAAStC,EAAMd,SAASQ,cAAc2C,mBAyDlC,IAAnCrC,EAAMd,SAASM,iBACfkD,QAAQC,IAAI,0BACL,YAAI3C,EAAMd,SAASA,UAAU0D,MAAK,SAACrE,EAAGsE,GAC3C,IAAMC,EAAQvE,EAAE6D,UAAUC,cACpBU,EAAQF,EAAET,UAAUC,cAC1B,OAAIS,EAAQC,GAAe,EACvBD,EAAQC,EAAc,EACnB,MAG4B,IAAnC/C,EAAMd,SAASM,iBACjBkD,QAAQC,IAAI,2BACL,YAAI3C,EAAMd,SAASA,UAAU0D,MAAK,SAACrE,EAAGsE,GAC3C,IAAMC,EAAQvE,EAAE6D,UAAUC,cACpBU,EAAQF,EAAET,UAAUC,cAC1B,OAAIS,EAAQC,GAAe,EACvBD,EAAQC,EAAc,EACnB,MAG2B,IAAlC/C,EAAMd,SAASO,gBACjBiD,QAAQC,IAAI,yBACL,YAAI3C,EAAMd,SAASA,UAAU0D,MAAK,SAACrE,EAAGsE,GAC3C,IAAMC,EAAQvE,EAAEgE,SAASF,cACnBU,EAAQF,EAAEN,SAASF,cACzB,OAAIS,EAAQC,GAAe,EACvBD,EAAQC,EAAc,EACnB,MAG2B,IAAlC/C,EAAMd,SAASO,gBACjBiD,QAAQC,IAAI,0BACL,YAAI3C,EAAMd,SAASA,UAAU0D,MAAK,SAACrE,EAAGsE,GAC3C,IAAMC,EAAQvE,EAAEgE,SAASF,cACnBU,EAAQF,EAAEN,SAASF,cACzB,OAAIS,EAAQC,GAAe,EACvBD,EAAQC,EAAc,EACnB,MAQJ/C,EAAMd,SAASA,aCjGpBM,EAAkByC,YAAYL,GAC9BnC,EAAiBwC,YAAYJ,GAE7BmB,EAAc9D,EAAS+D,KAAI,SAACd,EAASe,GAAV,OAC/B,yBAAKnC,UAAWC,IAAOmC,YAAaC,IAAKF,GACvC,6BAAMf,EAAQC,WACd,6BAAMD,EAAQI,UACd,6BAAMJ,EAAQK,OACd,6BAAML,EAAQM,WASlB,OAJAY,qBAAU,WACRxC,EAASxC,OACR,IAGD,oCAeE,yBAAK0C,UAAWC,IAAOsC,aACrB,yBAAKvC,UAAWC,IAAOuC,YACrB,yBAAKxC,UAAWC,IAAOwC,YAAaC,QAAS,WAC3C5C,EAAS9B,EAAkB,IAC3B8B,EAAS/B,EAAmBU,EAAkB,IACtB,IAApBA,GACFqB,EAAS/B,EAAmB,MAG9B,sCACqB,IAApBU,EAAwB,8BAAM,uBAAGuB,UAAU,oBAA+B,KACtD,IAApBvB,EAAwB,8BAAM,uBAAGuB,UAAU,kCAA6C,MAE3F,yBAAKA,UAAWC,IAAOwC,YAAaC,QAAS,WAC3C5C,EAAS/B,EAAmB,IAC5B+B,EAAS9B,EAAkBU,EAAiB,IACrB,IAAnBA,GACFoB,EAAS9B,EAAkB,MAG7B,qCACoB,IAAnBU,EAAuB,8BAAM,uBAAGsB,UAAU,oBAA+B,KACtD,IAAnBtB,EAAuB,8BAAM,uBAAGsB,UAAU,kCAA6C,MAE1F,yBAAKA,UAAWC,IAAOwC,aAAvB,SAGA,yBAAKzC,UAAWC,IAAOwC,aAAvB,UAIDnE,QAAwBqE,IAAbxE,EAAyB,uCAAmB8D,KC3EnDW,EAAW,WAGtB,OACE,yBAAK5C,UAAWC,IAAO4C,MACrB,kBAAC,EAAD,MACA,kBAAC,EAAD,Q,iCCZAC,EAAe,CACnBC,SAAU,GACVC,SAAU,IAGCC,EAAY,WAAO,IAAD,EACLC,mBAASJ,GADJ,mBACtB1D,EADsB,KAChB+D,EADgB,KAErBJ,EAAuB3D,EAAvB2D,SAAUC,EAAa5D,EAAb4D,SAEZI,EAAe,SAAC1C,GACpBA,EAAE2C,UACFF,GAAQ,SAACG,GAAD,sBACHA,EADG,eAEL5C,EAAEC,OAAO4C,KAAO7C,EAAEC,OAAOC,YAK9B,OADAe,QAAQC,IAAIxC,GAEV,yBAAKY,UAAWC,IAAOuD,WACrB,yBAAKxD,UAAWC,IAAOwD,YACrB,yBAAKzD,UAAWC,IAAOyD,MACrB,uBAAG1D,UAAU,iBAEf,2BACEM,KAAK,OACLE,YAAY,WACZ+C,KAAK,WACL3C,MAAOmC,EACPtC,SAAU2C,IAEZ,2BACE9C,KAAK,WACLE,YAAY,WACZ+C,KAAK,WACL3C,MAAOoC,EACPvC,SAAU2C,IAEZ,6CCpCKO,EAAU,kBACrB,kBAAC,IAAD,KACE,yBAAK3D,UAAWC,IAAO0D,KACrB,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWlB,IACjC,kBAAC,IAAD,CAAOiB,KAAK,SAASC,UAAWb,QCJxCc,IAASC,OACP,kBAAC,IAAD,CAAUtE,MAAOA,GACf,kBAAC,IAAMuE,WAAP,KACE,kBAAC,EAAD,QAIJC,SAASC,eAAe,W","file":"static/js/main.90c3cf2c.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"home\":\"home_home__2bNrD\",\"sortDropdownContainer\":\"home_sortDropdownContainer__3s0D_\",\"contactList\":\"home_contactList__vEzzO\",\"listHeader\":\"home_listHeader__1Yih6\",\"columnTitle\":\"home_columnTitle__2M9Sm\",\"columnIcon\":\"home_columnIcon__7pgE9\",\"contactCard\":\"home_contactCard__GXMBQ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"headerContainer\":\"Header_headerContainer__3ccm2\",\"headerLeft\":\"Header_headerLeft__2npg-\",\"title\":\"Header_title__1NaLM\",\"headerRight\":\"Header_headerRight__1dc9e\",\"search\":\"Header_search__2xCMB\",\"accountMenu\":\"Header_accountMenu__3vqAM\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"loginPage\":\"login_loginPage__pculF\",\"loginModal\":\"login_loginModal__3o71j\",\"icon\":\"login_icon__2oBgV\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__1E3x_\"};","export enum SortValues {\n  FIRST_ASC = \"FIRST_ASC\",\n  FIRST_DESC = \"FIRST_DESC\",\n  LAST_ASC = \"LAST_ASC\",\n  LAST_DESC = \"LAST_DESC\",\n}\n","import { createAction, createAsyncThunk } from \"@reduxjs/toolkit\";\r\nimport { User } from \"../../models/interfaces/user\"\r\nimport { Contact } from '../../models/interfaces/contact'\r\nimport { SortValues } from '../../models/SortValues'\r\nimport axios from 'axios'\r\n\r\nexport const getAllContacts = createAsyncThunk<any>('CONTACTS/GET_ALL_CONTACTS', async () => await axios.get('/api/contacts'));\r\nexport const setNewContacts = createAction<User[]>(\"SET_NEW_CONTACTS\");\r\nexport const setNewLoggedIn = createAction<boolean>(\"SET_NEW_LOGGEDIN\");\r\nexport const setNewUser = createAction<User>(\"SET_NEW_USER\");\r\nexport const setSortStatus = createAction<any>('SET_SORT_STATUS');\r\nexport const setFirstClickCount = createAction<number>('SET_FIRST_CLICK_COUNT');\r\nexport const setLastClickCount = createAction<number>('SET_LAST_CLICK_COUNT');\r\nexport const setContactSearch = createAction<string>('SET_CONTACT_SEARCH');\r\n","import { createReducer } from \"@reduxjs/toolkit\";\r\nimport { Contact } from \"../../models/interfaces/contact\";\r\nimport { User } from \"../../models/interfaces/user\";\r\nimport * as ContactActions from \"./actions\";\r\nimport { SortValues } from '../../models/SortValues'\r\n\r\ninterface ContactsState {\r\n  contacts: Contact[];\r\n  user: User;\r\n  isLoggedIn: boolean;\r\n  loading: boolean;\r\n  sortStatus: SortValues;\r\n  firstClickCount: number;\r\n  lastClickCount: number;\r\n  contactSearch: string;\r\n}\r\n\r\nconst initialState: ContactsState = {\r\n  contacts: [],\r\n  user: {} as User,\r\n  isLoggedIn: false,\r\n  loading: false,\r\n  sortStatus: SortValues.FIRST_ASC,\r\n  firstClickCount: 0,\r\n  lastClickCount: 0,\r\n  contactSearch: ''\r\n};\r\n\r\nconst contactReducer = createReducer(initialState, (contacts) => {\r\n  contacts\r\n    .addCase(\r\n      ContactActions.getAllContacts.pending, \r\n      (state: ContactsState) => ({\r\n        ...state,\r\n        loading: true\r\n    }))\r\n    .addCase(\r\n      ContactActions.getAllContacts.fulfilled,\r\n      (state: ContactsState, { payload }) => ({\r\n        ...state,\r\n        loading: false,\r\n        contacts: payload.data,\r\n      })\r\n    )\r\n    .addCase(\r\n      ContactActions.getAllContacts.rejected,\r\n      (state: ContactsState, { error }) => {\r\n        alert(`${error.stack}`)\r\n      }\r\n    )\r\n    .addCase(\r\n      ContactActions.setNewLoggedIn,\r\n      (state: ContactsState, { payload }) => ({\r\n        ...state,\r\n        isLoggedIn: payload,\r\n      })\r\n    )\r\n    .addCase(\r\n      ContactActions.setNewUser,\r\n      (state: ContactsState, { payload }) => ({\r\n        ...state,\r\n        user: payload,\r\n      })\r\n    )\r\n    .addCase(\r\n      ContactActions.setSortStatus,\r\n      (state: ContactsState, { payload }) => ({\r\n        ...state,\r\n        sortStatus: payload,\r\n      })\r\n    )\r\n    .addCase(\r\n      ContactActions.setFirstClickCount,\r\n      (state: ContactsState, { payload }) => ({\r\n        ...state,\r\n        firstClickCount: payload,\r\n      })\r\n    )\r\n    .addCase(\r\n      ContactActions.setLastClickCount,\r\n      (state: ContactsState, { payload }) => ({\r\n        ...state,\r\n        lastClickCount: payload,\r\n      })\r\n    )\r\n    .addCase(\r\n      ContactActions.setContactSearch,\r\n      (state: ContactsState, { payload }) => ({\r\n        ...state,\r\n        contactSearch: payload,\r\n      })\r\n    )\r\n    .addDefaultCase((state: ContactsState) => state);\r\n});\r\n\r\nexport default contactReducer;\r\n","import { Action, configureStore, ThunkAction } from \"@reduxjs/toolkit\";\r\nimport contactReducer from \"./contacts/reducer\";\r\n\r\n// when adding a new reducer, make sure to add it here\r\nexport const store = configureStore({\r\n  reducer: {\r\n    contacts: contactReducer,\r\n  },\r\n});\r\n\r\nexport type RootState = ReturnType<typeof store.getState>;\r\nexport type AppThunk<ReturnType = void> = ThunkAction<\r\n  ReturnType,\r\n  RootState,\r\n  unknown,\r\n  Action<string>\r\n>;\r\n","import React, { FC } from 'react'\nimport styles from './Header.module.scss'\nimport { setContactSearch } from '../../redux/contacts/actions'\nimport { useDispatch } from 'react-redux'\n\nconst Header: FC = () => {\n  const dispatch = useDispatch();\n\n  return (\n    <div className={styles.headerContainer}>\n      <div className={styles.headerLeft}>\n        <div className={styles.title}>My Contacts</div>\n      </div>\n      <div className={styles.headerRight}>\n        <input type=\"text\" className={styles.search} /* value={} */ placeholder='Search Contacts...' onChange={(e) => {\n          dispatch(setContactSearch(e.target.value))\n        }} />\n        {/* <div className={styles.accountMenu}>account menu</div> */}\n      </div>\n    </div>\n  )\n}\n\nexport default Header\n","import { RootState } from \"../store\";\nimport { SortValues } from \"../../models/SortValues\";\n\nexport const selectUser = (state: RootState) => state.contacts.user;\nexport const selectFirstClickCount = (state: RootState) => state.contacts.firstClickCount;\nexport const selectLastClickCount = (state: RootState) => state.contacts.lastClickCount;\nexport const selectContacts =\n  (sortStatus: SortValues) => (state: RootState) => {\n\n    // ======= Search/filter through contacts ========= \n    if (state.contacts.contactSearch !== '') {\n      return state.contacts.contacts.filter((contact) => {\n        return (\n          contact.firstName.toLowerCase().includes(state.contacts.contactSearch.toLowerCase()) || \n          contact.lastName.toLowerCase().includes(state.contacts.contactSearch.toLowerCase()) || \n          contact.phone?.toLowerCase().includes(state.contacts.contactSearch.toLowerCase()) || \n          contact.email?.toLowerCase().includes(state.contacts.contactSearch.toLowerCase())\n      )})\n    }\n\n\n    // ============= logic with select element ===============\n    // // console.log({ sortStatus });\n    // if (sortStatus === SortValues.FIRST_ASC) {\n    //   // console.log(\"sort asc by first name\");\n    //   return [...state.contacts.contacts].sort((a, b) => {\n    //     const nameA = a.firstName.toLowerCase();\n    //     const nameB = b.firstName.toLowerCase();\n    //     if (nameA < nameB) return -1;\n    //     if (nameA > nameB) return 1;\n    //     return 0;\n    //   });\n    // }\n    // if (sortStatus === SortValues.FIRST_DESC) {\n    //   // console.log(\"sort desc by first name\");\n    //   return [...state.contacts.contacts].sort((a, b) => {\n    //     const nameA = a.firstName.toLowerCase();\n    //     const nameB = b.firstName.toLowerCase();\n    //     if (nameA > nameB) return -1;\n    //     if (nameA < nameB) return 1;\n    //     return 0;\n    //   });\n    // }\n    // if (sortStatus === SortValues.LAST_ASC) {\n    //   return [...state.contacts.contacts].sort((a, b) => {\n    //     const nameA = a.lastName.toLowerCase();\n    //     const nameB = b.lastName.toLowerCase();\n    //     if (nameA < nameB) return -1;\n    //     if (nameA > nameB) return 1;\n    //     return 0;\n    //   });\n    // }\n    // if (sortStatus === SortValues.LAST_DESC) {\n      //   return [...state.contacts.contacts].sort((a, b) => {\n        //     const nameA = a.lastName.toLowerCase();\n        //     const nameB = b.lastName.toLowerCase();\n        //     if (nameA > nameB) return -1;\n        //     if (nameA < nameB) return 1;\n        //     return 0;\n        //   });\n        // }\n        \n    // return [...state.contacts.contacts].sort((a, b) => {\n    //   const nameA = a.firstName.toLowerCase();\n    //   const nameB = b.firstName.toLowerCase();\n    //   if (nameA < nameB) return -1;\n    //   if (nameA > nameB) return 1;\n    //   return 0;\n    // });\n\n\n\n    // ================= logic with click count of table title ===========================\n    if (state.contacts.firstClickCount === 1) {\n        console.log(\"sort asc by first name\");\n        return [...state.contacts.contacts].sort((a, b) => {\n          const nameA = a.firstName.toLowerCase();\n          const nameB = b.firstName.toLowerCase();\n          if (nameA < nameB) return -1;\n          if (nameA > nameB) return 1;\n          return 0;\n        });\n      }\n      if (state.contacts.firstClickCount === 2) {\n        console.log(\"sort desc by first name\");\n        return [...state.contacts.contacts].sort((a, b) => {\n          const nameA = a.firstName.toLowerCase();\n          const nameB = b.firstName.toLowerCase();\n          if (nameA > nameB) return -1;\n          if (nameA < nameB) return 1;\n          return 0;\n        });\n      }\n      if (state.contacts.lastClickCount === 1) {\n        console.log(\"sort asc by last name\");\n        return [...state.contacts.contacts].sort((a, b) => {\n          const nameA = a.lastName.toLowerCase();\n          const nameB = b.lastName.toLowerCase();\n          if (nameA < nameB) return -1;\n          if (nameA > nameB) return 1;\n          return 0;\n        });\n      }\n      if (state.contacts.lastClickCount === 2) {\n        console.log(\"sort desc by last name\");\n        return [...state.contacts.contacts].sort((a, b) => {\n          const nameA = a.lastName.toLowerCase();\n          const nameB = b.lastName.toLowerCase();\n          if (nameA > nameB) return -1;\n          if (nameA < nameB) return 1;\n          return 0;\n        });\n      }\n\n\n      \n\n      // default return statement\n      return state.contacts.contacts\n  };\nexport const selectIsLoggedIn = (state: RootState) => state.contacts.isLoggedIn;\nexport const selectIsLoading = (state: RootState) => state.contacts.loading;\nexport const selectSortStatus = (state: RootState) => state.contacts.sortStatus;\n","import React, { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { getAllContacts, setFirstClickCount, setLastClickCount, setSortStatus } from \"../../redux/contacts/actions\";\nimport {\n  selectFirstClickCount,\n  selectLastClickCount,\n  selectContacts,\n  selectIsLoading,\n  selectSortStatus,\n} from \"../../redux/contacts/selectors\";\nimport styles from \"./home.module.scss\";\nimport { SortValues } from \"../../models/SortValues\";\n\nconst ContactsList = () => {\n  // DISPATCH HOOK\n  const dispatch = useDispatch();\n\n  // SELECTORS\n  const loading = useSelector(selectIsLoading);\n  const sortStatus = useSelector(selectSortStatus);\n  const contacts = useSelector(selectContacts(sortStatus));\n  const firstClickCount = useSelector(selectFirstClickCount)\n  const lastClickCount = useSelector(selectLastClickCount)\n  \n  const contactsMap = contacts.map((contact, i) => (\n    <div className={styles.contactCard} key={i}>\n      <div>{contact.firstName}</div>\n      <div>{contact.lastName}</div>\n      <div>{contact.phone}</div>\n      <div>{contact.email}</div>\n    </div>\n  ));\n\n\n  useEffect(() => {\n    dispatch(getAllContacts());\n  }, []);\n\n  return (\n    <>\n      {/* <div className={styles.sortDropdownContainer}>\n        <select\n          value={sortStatus}\n          onChange={(e) => {\n            console.log(e.target.value);\n            dispatch(setSortStatus(e.target.value));\n          }}\n        >\n          <option value={SortValues.FIRST_ASC}>First Name: A-Z</option>\n          <option value={SortValues.FIRST_DESC}>First Name: Z-A</option>\n          <option value={SortValues.LAST_ASC}>Last Name: A-Z</option>\n          <option value={SortValues.LAST_DESC}>Last Name: Z-A</option>\n        </select>\n      </div> */}\n      <div className={styles.contactList}>\n        <div className={styles.listHeader}>\n          <div className={styles.columnTitle} onClick={() => {\n            dispatch(setLastClickCount(0))\n            dispatch(setFirstClickCount(firstClickCount + 1))\n            if (firstClickCount === 2) {\n              dispatch(setFirstClickCount(0))\n            }\n          }}>\n            <div>First</div>\n            {firstClickCount === 1 ? <span><i className=\"fas fa-sort-up\"></i></span> : null }\n            {firstClickCount === 2 ? <span><i className=\"fas fa-sort-up fa-rotate-180\"></i></span> : null }\n          </div>\n          <div className={styles.columnTitle} onClick={() => {\n            dispatch(setFirstClickCount(0))\n            dispatch(setLastClickCount(lastClickCount + 1))\n            if (lastClickCount === 2) {\n              dispatch(setLastClickCount(0))\n            }\n          }}>\n            <div>Last</div>\n            {lastClickCount === 1 ? <span><i className=\"fas fa-sort-up\"></i></span> : null }\n            {lastClickCount === 2 ? <span><i className=\"fas fa-sort-up fa-rotate-180\"></i></span> : null }\n          </div>\n          <div className={styles.columnTitle}>\n            Phone\n          </div>\n          <div className={styles.columnTitle}>\n            Email\n          </div>\n        </div>\n        {loading && contacts === undefined ? <h1>loading</h1> : contactsMap}\n      </div>\n    </>\n  );\n};\n\nexport default ContactsList;\n","import React, { FC } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { selectContacts, selectIsLoading, selectUser } from \"../../redux/contacts/selectors\";\r\nimport styles from \"./home.module.scss\";\r\nimport axios from \"axios\";\r\n\r\n// Components\r\nimport Header from \"../header/Header\";\r\nimport ContactsList from '../home/ContactsList';\r\n\r\nexport const Home: FC = () => {\r\n   \r\n\r\n  return (\r\n    <div className={styles.home}>\r\n      <Header />\r\n      <ContactsList />\r\n    </div>\r\n  );\r\n};\r\n","import React, { FC, useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport styles from \"./index.module.scss\";\r\n\r\nconst defaultState = {\r\n  username: \"\",\r\n  password: \"\",\r\n};\r\n\r\nexport const Login: FC = () => {\r\n  const [data, setData] = useState(defaultState);\r\n  const { username, password } = data;\r\n\r\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    e.persist();\r\n    setData((prevState) => ({\r\n      ...prevState,\r\n      [e.target.name]: e.target.value,\r\n    }));\r\n  };\r\n\r\n  console.log(data);\r\n  return (\r\n    <div className={styles.loginPage}>\r\n      <div className={styles.loginModal}>\r\n        <div className={styles.icon}>\r\n          <i className=\"fas fa-user\"></i>\r\n        </div>\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"username\"\r\n          name=\"username\"\r\n          value={username}\r\n          onChange={handleChange}\r\n        />\r\n        <input\r\n          type=\"password\"\r\n          placeholder=\"password\"\r\n          name=\"password\"\r\n          value={password}\r\n          onChange={handleChange}\r\n        />\r\n        <button>log in</button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import React, { FC } from \"react\";\r\nimport { HashRouter as Router, Switch, Route } from \"react-router-dom\";\r\nimport styles from \"./App.module.scss\";\r\nimport { Home } from \"../home/home\";\r\nimport { Login } from \"../login/Login\";\r\n\r\nexport const App: FC = () => (\r\n  <Router>\r\n    <div className={styles.App}>\r\n      <Switch>\r\n        <Route exact path=\"/\" component={Home} />\r\n        <Route path=\"/login\" component={Login} />\r\n      </Switch>\r\n    </div>\r\n  </Router>\r\n);\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.module.scss\";\r\nimport { Provider } from \"react-redux\";\r\nimport { store } from \"./redux/store\";\r\nimport { App } from \"./components/app/App\";\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <React.StrictMode>\r\n      <App />\r\n    </React.StrictMode>\r\n  </Provider>,\r\n\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\n"],"sourceRoot":""}